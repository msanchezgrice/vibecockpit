// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  status             ProjectStatus       @default(design)
  frontendUrl        String?             @map("frontend_url")
  vercelProjectId    String?             @map("vercel_project_id")
  githubRepo         String?             @map("github_repo")
  lastActivityAt     DateTime            @default(now()) @map("last_activity_at")
  createdAt          DateTime            @default(now()) @map("created_at")
  changelog          ChangeLogEntry[]
  costSnapshots      CostSnapshot[]
  analyticsSnapshots AnalyticsSnapshot[]
  checklistItems     ChecklistItem[]
}

enum ProjectStatus {
  design
  prep_launch
  launched
  paused
  retired
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ChangeLogEntry {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  provider  String // e.g., "note", "github_commit", "vercel_deploy"
  message   String // Removed @db.Text
  meta      Json? // Store arbitrary JSON data if needed
  createdAt DateTime @default(now()) @map("created_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@map("changelog_entries")
}

model CostSnapshot {
  id         String   @id @default(cuid())
  projectId  String   @map("project_id")
  costAmount Decimal  @map("cost_amount")
  createdAt  DateTime @default(now()) @map("created_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt(sort: Desc)])
  @@map("cost_snapshots")
}

model AnalyticsSnapshot {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  visits    Int      @default(0)
  signups   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt(sort: Desc)])
  @@map("analytics_snapshots")
}

// Add ChecklistItem model
model ChecklistItem {
  id           String   @id @default(cuid())
  projectId    String   @map("project_id")
  title        String
  is_complete  Boolean  @default(false) @map("is_complete")
  ai_help_hint String?  @map("ai_help_hint") // Store the AI draft/hint
  order        Int      @default(0) // For ordering tasks
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, order])
  @@index([projectId, order])
  @@map("checklist_items")
}
